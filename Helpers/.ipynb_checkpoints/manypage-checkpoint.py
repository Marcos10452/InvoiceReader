{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The code for changing pages was derived from: http://stackoverflow.com/questions/7546050/switch-between-two-frames-in-tkinter\n",
    "# License: http://creativecommons.org/licenses/by-sa/3.0/\t\n",
    "\n",
    "import tkinter as tk\n",
    "\n",
    "\n",
    "LARGE_FONT= (\"Verdana\", 12)\n",
    "\n",
    "\n",
    "class SeaofBTCapp(tk.Tk):\n",
    "\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        \n",
    "        tk.Tk.__init__(self, *args, **kwargs)\n",
    "        container = tk.Frame(self)\n",
    "\n",
    "        container.pack(side=\"top\", fill=\"both\", expand = True)\n",
    "\n",
    "        container.grid_rowconfigure(0, weight=1)\n",
    "        container.grid_columnconfigure(0, weight=1)\n",
    "\n",
    "        self.frames = {}\n",
    "\n",
    "        for F in (StartPage, PageOne, PageTwo):\n",
    "\n",
    "            frame = F(container, self)\n",
    "\n",
    "            self.frames[F] = frame\n",
    "\n",
    "            frame.grid(row=0, column=0, sticky=\"nsew\")\n",
    "\n",
    "        self.show_frame(StartPage)\n",
    "\n",
    "    def show_frame(self, cont):\n",
    "\n",
    "        frame = self.frames[cont]\n",
    "        frame.tkraise()\n",
    "\n",
    "        \n",
    "class StartPage(tk.Frame):\n",
    "\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self,parent)\n",
    "        label = tk.Label(self, text=\"Start Page\", font=LARGE_FONT)\n",
    "        label.pack(pady=10,padx=10)\n",
    "\n",
    "        button = tk.Button(self, text=\"Visit Page 1\",\n",
    "                            command=lambda: controller.show_frame(PageOne))\n",
    "        button.pack()\n",
    "\n",
    "        button2 = tk.Button(self, text=\"Visit Page 2\",\n",
    "                            command=lambda: controller.show_frame(PageTwo))\n",
    "        button2.pack()\n",
    "\n",
    "\n",
    "class PageOne(tk.Frame):\n",
    "\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self, parent)\n",
    "        label = tk.Label(self, text=\"Page One!!!\", font=LARGE_FONT)\n",
    "        label.pack(pady=10,padx=10)\n",
    "\n",
    "        button1 = tk.Button(self, text=\"Back to Home\",\n",
    "                            command=lambda: controller.show_frame(StartPage))\n",
    "        button1.pack()\n",
    "\n",
    "        button2 = tk.Button(self, text=\"Page Two\",\n",
    "                            command=lambda: controller.show_frame(PageTwo))\n",
    "        button2.pack()\n",
    "\n",
    "\n",
    "class PageTwo(tk.Frame):\n",
    "\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self, parent)\n",
    "        label = tk.Label(self, text=\"Page Two!!!\", font=LARGE_FONT)\n",
    "        label.pack(pady=10,padx=10)\n",
    "\n",
    "        button1 = tk.Button(self, text=\"Back to Home\",\n",
    "                            command=lambda: controller.show_frame(StartPage))\n",
    "        button1.pack()\n",
    "\n",
    "        button2 = tk.Button(self, text=\"Page One\",\n",
    "                            command=lambda: controller.show_frame(PageOne))\n",
    "        button2.pack()\n",
    "        \n",
    "\n",
    "\n",
    "app = SeaofBTCapp()\n",
    "app.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
